'use strict';

var _condenseWhitespace = require('condense-whitespace');

var _condenseWhitespace2 = _interopRequireDefault(_condenseWhitespace);

var _deasync = require('deasync');

var _deasync2 = _interopRequireDefault(_deasync);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssNested = require('postcss-nested');

var _postcssNested2 = _interopRequireDefault(_postcssNested);

var _postcssLoadConfig = require('postcss-load-config');

var _postcssLoadConfig2 = _interopRequireDefault(_postcssLoadConfig);

var _stringHash = require('string-hash');

var _stringHash2 = _interopRequireDefault(_stringHash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cssClassNameRe = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
var cssClassNameCleanRe = /[^\w\/-]/g;

/**
 * Initialize postcss `processor`.
 * Use `deasync` to make async methods sync.
 */

var parseConfig = (0, _deasync2.default)(function (cb) {
  (0, _postcssLoadConfig2.default)({}, '', { argv: false }).then(function (c) {
    return cb(null, c);
  }).catch(function (err) {
    if (err.toString().indexOf('No PostCSS Config found in') !== -1) return cb(null, {}); // ignore, not required
    return cb(err);
  });
});

var config = parseConfig();
var plugins = [(0, _postcssNested2.default)({ preserveEmpty: true })].concat(config.plugins || []);
var processor = (0, _postcss2.default)(plugins);

var processCss = (0, _deasync2.default)(function (src, cb) {
  processor.process(src).then(function (result) {
    return cb(null, result);
  }).catch(function (err) {
    return cb(err);
  });
});

/**
 * Define babel plugin that analyze tagged template literals
 * with `css` tag or `inject.css`, example:
 *
 * const = css`{ color: red }`
 * inject.css`body { font-size: 10px }`
 */

module.exports = function (_ref) {
  var t = _ref.types;

  return {
    pre: function pre() {
      this.hashes = new Map();
      this.classes = new Map();
    },


    visitor: {
      TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
        var tag = path.node.tag;

        if (tag.name === 'css') {
          var isVariable = path.parent.type === 'VariableDeclarator';

          var _extractCss = extractCss(path, state.opts, this.classes, isVariable),
              src = _extractCss.src,
              root = _extractCss.root,
              prefix = _extractCss.prefix;

          var selectors = root.nodes.filter(function (node) {
            return node.type === 'rule' && !node.selector.includes(':') && !node.selector.includes('[') && !node.selector.includes('>') && !node.selector.substr(1).includes('.'); // TODO: improve selectors filtering
          }).map(function (node) {
            return node.selector;
          });
          var fileHash = (0, _stringHash2.default)(path.hub.file.opts.filenameRelative);
          var increment = this.hashes.get(fileHash) || 1;
          this.hashes.set(fileHash, increment + 1);
          var propertiesString = '{_css: `' + (0, _condenseWhitespace2.default)(src).replace(/\n/g, ' ') + '`, _hash: "' + fileHash + '-' + increment + '"}';
          if (isVariable) {
            var defaultLevel = prefix.split('-').length;
            var nestedObject = generateNestedObject(selectors, prefix, defaultLevel);
            propertiesString = transformNestedObjectToString(nestedObject, propertiesString);
          }
          path.replaceWithSourceString(isVariable ? 'css.inject(' + propertiesString + ')' : propertiesString);
        }
      }
    }
  };
};

/**
 * Extract content inside of css`` expression and process with postcss.
 * Stubs extraction is required, because otherwise postcss fails.
 *
 * Adopted code from:
 * https://github.com/threepointone/markdown-in-js/blob/master/src/babel.js#L73
 * https://github.com/threepointone/glamor/blob/master/src/css/babel.js#L156
 *
 * @param {Path} path
 * @param {boolean} isGlobal
 * @return {string}
 */

function extractCss(path, config, classes, isVariable) {
  var code = path.hub.file.code;
  var stubs = path.node.quasi.expressions.map(function (x) {
    return code.substring(x.start, x.end);
  });
  var strs = path.node.quasi.quasis.map(function (x) {
    return x.value.cooked;
  });
  var stubCtx = stubs.reduce(function (o, stub, i) {
    o['stub-' + i] = stub;
    return o;
  }, {});

  var ctr = 0;
  var src = strs.reduce(function (arr, str, i) {
    arr.push(str);
    if (i !== stubs.length) {
      arr.push('stub-' + ctr++);
    }
    return arr;
  }, []).join('');

  var prefix = generateClassName(src, path.hub.file.opts, config, classes);
  var result = processCss(isVariable ? prefix + '{ ' + src + ' }' : src);
  var newSrc = result.css.replace(/stub-[0-9]+/gm, function (x) {
    return '${' + stubCtx[x] + '}';
  });
  return { src: newSrc, root: result.root, prefix: prefix };
}

/**
 * Generate class name for generic file names: style.js and index.js
 * using `filenameRelative`.
 * Cache repeating names in `classes`.
 *
 * @param {string} src
 * @param {Object} fileOpts - { basename, filenameRelative }
 * @param {Object} config - { namespace, root }
 * @return {string}
 */

function generateClassName(src, _ref2, _ref3, classes) {
  var basename = _ref2.basename,
      filenameRelative = _ref2.filenameRelative;
  var _ref3$namespace = _ref3.namespace,
      namespace = _ref3$namespace === undefined ? 'c' : _ref3$namespace,
      _ref3$root = _ref3.root,
      root = _ref3$root === undefined ? '' : _ref3$root;

  if (basename === 'style' || basename === 'index') {
    var pathRelative = _path2.default.relative(process.cwd(), filenameRelative);
    var pathWithoutRoot = _path2.default.dirname(pathRelative).replace(new RegExp('^' + root + '/'), '');
    var pathBlocks = pathWithoutRoot.split('/');
    var uniquePathBlocks = pathBlocks.filter(function (pathBlock, index) {
      var nextPathBlock = pathBlocks[index + 1];
      return !nextPathBlock || nextPathBlock.indexOf(pathBlock) !== 0;
    });
    var className = uniquePathBlocks.join('-').replace(cssClassNameCleanRe, '_');
    if (!cssClassNameRe.test(className)) {
      console.error('Warning: invalid CSS class name \'' + className + '\'. Validation with regular expression \'' + cssClassNameRe + '\' failed.');
    }
    var increment = classes.get(className) || 1;
    classes.set(className, increment + 1);
    return '.' + namespace + '-' + className + (increment > 1 ? increment : '');
  }
  return '.' + namespace + '-' + (0, _stringHash2.default)(src);
}

/**
 * Transform `selectors` to nested object of `{ root, children }`.
 *
 * @param {Array<string>} selectors
 * @param {string} rootSelector
 * @param {number} level - current nesting level
 * @return {Object}
 */

function generateNestedObject(selectors, rootSelector, level) {
  var childrenSelectors = selectors.filter(function (selector) {
    return selector !== rootSelector && selector.indexOf(rootSelector) === 0 && selector.split('-').length === level + 1; // TODO optimize selectors filtering
  });
  var children = childrenSelectors.map(function (childSeletor) {
    return generateNestedObject(selectors, childSeletor, level + 1);
  });
  return { root: rootSelector, children: children };
}

/**
 * Generate JS representation of nested object.
 *
 * @param  {Object} obj
 * @param  {String} [initialStr]
 * @return [string]
 */

function transformNestedObjectToString(obj) {
  var initialStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (obj.children.length) {
    var children = obj.children.map(function (child) {
      var prop = child.root.replace(obj.root + '-', '');
      return '"' + prop + '": ' + transformNestedObjectToString(child);
    });
    return initialStr ? initialStr.replace(/}$/, ',\n          toString() { return "' + obj.root.substr(1) + '" },\n          ' + children.join(',') + '\n        }') : '{\n          toString() { return "' + obj.root.substr(1) + '" },\n          ' + children.join(',') + '\n        }';
  }
  return initialStr ? initialStr.replace(/}$/, ', toString() { return "' + obj.root.substr(1) + '" } }') : '"' + obj.root.substr(1) + '"'; // remove "." from begining
}