'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inject = inject;
exports.css = css;
/**
 * Detect server render.
 */

var isServer = typeof window === 'undefined';
var styles = {};
var flush = exports.flush = function flush() {
  var ret = Object.keys(styles).map(function (key) {
    return styles[key];
  });
  styles = {};
  return ret;
};

/**
 * Cache style tags to avoid double injection.
 */

var styleTags = {};

/**
 * Inject css object (result of babel compilation) to dom.
 *
 * @param {Object|string} obj
 * @return {Object|string}
 */

function inject(obj) {
  var str = typeof obj === 'string' ? obj : obj._css;
  var hash = typeof obj === 'string' ? stringHash(str) : obj._hash;

  if (isServer) {
    return new Proxy(obj, {
      get: function get(target, prop, receiver) {
        if (prop !== '_css' && !styles[hash]) styles[hash] = str;
        return target[prop];
      }
    });
  }

  if (styleTags[hash]) {
    var tag = styleTags[hash];
    tag.innerHTML = str;
  } else {
    var _tag = document.createElement('style');
    _tag.appendChild(document.createTextNode(str));
    styleTags[hash] = _tag;

    var head = document.head || document.getElementsByTagName('head')[0];
    head.appendChild(_tag);
  }

  return obj;
}

/**
 * Placeholder for babel compiler.
 */

function css() {
  throw new Error('Please transform your code with "injected-css/babel"');
}
css.inject = inject;

/**
 * A fast string hashing function,
 * copied from https://github.com/darkskyapp/string-hash
 *
 * @param {string} str
 * @return {number} 0..4294967295
 */

function stringHash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, convert the
   * signed int to an unsigned by doing an unsigned bitshift. */
  return hash >>> 0;
}